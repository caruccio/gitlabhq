#!/usr/bin/env python

import os
import sys
import json
import errno
import atexit
import shutil
import tempfile
import StringIO
import subprocess

try:
	command = sys.argv[1]
	if command == 'list':
		project = sys.argv[2]
	elif command == 'add':
		project, remote, giturl = sys.argv[2:]
	elif command == 'del':
		project, remote = sys.argv[2:]
	elif command == 'clone':
		project, remote, giturl = sys.argv[2:]
	else:
		raise ValueError('Invalid command: %s' % command)
except (ValueError, TypeError):
	print >> sys.stderr, 'Usage: %s COMMAND [ARGUMENTS...]' % sys.argv[0]
	print >> sys.stderr, 'COMMANDs:'
	print >> sys.stderr, '  list PROJECT REMOTE GIT-URL' % sys.argv[0]
	print >> sys.stderr, '   add PROJECT REMOTE GIT-URL' % sys.argv[0]
	print >> sys.stderr, '   del PROJECT REMOTE' % sys.argv[0]
	print >> sys.stderr, ' clone PROJECT REMOTE GIT-URL' % sys.argv[0]
	sys.exit(1)

getup_config_flename = 'getup-conf'
git = os.environ['GIT_PATH'] if 'GIT_PATH' in os.environ else '/usr/bin/git'
_empty_project = {
	'project': '',
	'remotes': [],
}

def json_dump(obj):
	data = StringIO.StringIO()
	json.dump(obj, data, indent=3)
	data.seek(0)
	return data.read()

def print_status(status=500, **kva):
	if kva:
		print json_dump({ 'status': status, 'data': kva })
	else:
		print json_dump({ 'status': status })

def project_dir(project):
	return os.path.expanduser('~git/repositories/%s.git' % project)

def config_path(project):
	return os.path.join(project_dir(project), getup_config_flename)

def chdir_project(project):
	gitdir = project_dir(project)
	try:
		os.chdir(gitdir)
	except OSError, ex:
		print_status(status=404 if ex.errno == errno.ENOENT else 500, directory=gitdir)
		sys.exit(2)

def lock_config(project):
	atexit.register(release_config, project)

def release_config(project):
	pass

def _load_config(project):
	with open(config_path(project), 'a+') as fp:
		content = None
		try:
			content = fp.read()
			config = json.loads(content)
			#print 'loaded config: %s' % fp.name
		except ValueError, ex:
			if content:
				raise ValueError("Invalid config file format: %s", ex)
			config = dict(_empty_project)
			config['project'] = project

	assert 'project' in config, 'Missing entry: project'
	assert 'remotes' in config, 'Missing entry: remotes'
	assert config['project'] == project, 'Mismatch project name'
	return config

def load_config(project):
	config = _load_config(project)
	lock_config(project)
	return config

def save_config(config):
	assert isinstance(config, dict)
	with open(config_path(project), 'w+') as fp:
		#print 'saving config: %s' % fp.name
		data = json_dump(config)
		fp.write(data)
		#print 'config saved: %s' % data

#
# Commands
#
def add_remote(config, remote, giturl):
	assert isinstance(config, dict)
	remotes = config['remotes']
	for r in remotes:
		if remote == r['name']:
			r['url'] = giturl
			return
	remotes.append({'name': remote, 'url': giturl})

def del_remote(config, remote):
	assert isinstance(config, dict)
	remotes = config['remotes']
	before = len(remotes)
	for i, r in enumerate(remotes):
		if remote == r['name']:
			remotes.pop(i)
	if len(remotes) == before:
		print_status(status=404, name=remote)
	else:
		print_status(status=204)

def list_remotes(config, status=200):
	print_status(status=status, config=config)

def run_command(*arguments, **kvargs):
	proc = subprocess.Popen(arguments, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kvargs)
	stdout, stderr = proc.communicate()
	if proc.returncode != 0:
		print_status(status=500, command=arguments, retcode=proc.returncode, stdout=stdout, stderr=stderr)
		raise Exception
	return proc

def repo_is_empty():
	arguments = [ git, 'log', '-1', '--pretty=format:%h' ]
	proc = subprocess.Popen(arguments, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	stdout, stderr = proc.communicate()
	return proc.returncode != 0 or not stdout

def clone_remote(remote, giturl):
	assert giturl and project, 'Invalid parameters (%s, %s)' % (project, giturl)
	if not repo_is_empty():
		print_status(status=409, message='project repository not empty')
		sys.exit(2)

	tempdir = tempfile.mkdtemp()
	try:
		run_command(git, 'clone', giturl, project, cwd=tempdir)
		run_command(git, 'push', 'git@git.ops.getupcloud.com:%s.git' % project, 'master', cwd=os.path.join(tempdir, project))
	except Exception:
		sys.exit(2)
	finally:
		shutil.rmtree(tempdir, ignore_errors=False)

	config = load_config(project)
	add_remote(config, remote, giturl)
	list_remotes(config, status=201)

if command == 'list':
	list_remotes(_load_config(project))
	sys.exit(0)

if command == 'clone':
	clone_remote(remote, giturl)
elif command == 'add':
	config = load_config(project)
	add_remote(config, remote, giturl)
	list_remotes(config, status=201)
elif command == 'del':
	config = load_config(project)
	del_remote(config, remote)

save_config(config)
